import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
import pandas as pd
from src.model_utils import carregar_modelo, prever_contratacao

# Configura√ß√£o visual e t√≠tulo da p√°gina
st.set_page_config(page_title="Simula√ß√£o de Candidatos", layout="centered", page_icon="üß™")
st.title("üß™ Simula√ß√£o com Exemplos Reais")

# Explica√ß√£o inicial
st.markdown("""
Este projeto utiliza Machine Learning para prever automaticamente se um candidato tem alto potencial de contrata√ß√£o com base em seu hist√≥rico textual, extra√≠do de curr√≠culos e dados associados √†s vagas.

A previs√£o √© feita por meio de um modelo treinado sobre decis√µes anteriores da empresa, e retorna uma **classifica√ß√£o (aprovado/reprovado)** com um grau de **confian√ßa (probabilidade)**.
""")

# Carrega modelo e base de exemplos
modelo = carregar_modelo()
df_exemplos = pd.read_csv('data/exemplos_simulacao.csv')

st.header("Sobre os candidatos listados")
st.markdown("""
Os curr√≠culos abaixo s√£o **exemplos reais da base**, selecionados aleatoriamente entre candidatos com hist√≥rico conhecido (aprovado ou n√£o).

Voc√™ pode explorar diferentes perfis e observar como o modelo reage em termos de classifica√ß√£o e confian√ßa.
""")

# Escolha do candidato
codigo_escolhido = st.selectbox("Escolha um candidato:", df_exemplos['codigo'])
texto = df_exemplos.loc[df_exemplos['codigo'] == codigo_escolhido, 'texto_completo'].values[0]

# Exibe o texto
st.text_area("Texto do curr√≠culo selecionado:", texto, height=250)

st.header("Resultado da classifica√ß√£o")
st.markdown("""
Ao clicar no bot√£o abaixo, o modelo ir√° analisar o conte√∫do textual e emitir uma **previs√£o bin√°ria** com base no aprendizado de padr√µes anteriores.

- **Confian√ßa** refere-se √† **probabilidade prevista da classe 'aprovado'** (valor entre 0 e 1).
- Esta **n√£o √© uma decis√£o definitiva**, e sim um apoio estrat√©gico ao processo de triagem.
""")

# Bot√£o de classifica√ß√£o
if st.button("Classificar candidato"):
    resultado, probabilidade = prever_contratacao(modelo, texto)
    if resultado == 1:
        st.success(f"‚úÖ Candidato aprovado! Confian√ßa: {probabilidade:.2f}")
    else:
        st.error(f"‚ùå Candidato reprovado. Confian√ßa: {probabilidade:.2f}")
